/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as SubVue3IndexImport } from './routes/sub-vue3/index'
import { Route as SubNuxtIndexImport } from './routes/sub-nuxt/index'
import { Route as SubNextIndexImport } from './routes/sub-next/index'
import { Route as UserIndexUserIdImport } from './routes/user/index.$userId'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SubVue3IndexRoute = SubVue3IndexImport.update({
  id: '/sub-vue3/',
  path: '/sub-vue3/',
  getParentRoute: () => rootRoute,
} as any)

const SubNuxtIndexRoute = SubNuxtIndexImport.update({
  id: '/sub-nuxt/',
  path: '/sub-nuxt/',
  getParentRoute: () => rootRoute,
} as any)

const SubNextIndexRoute = SubNextIndexImport.update({
  id: '/sub-next/',
  path: '/sub-next/',
  getParentRoute: () => rootRoute,
} as any)

const UserIndexUserIdRoute = UserIndexUserIdImport.update({
  id: '/user/index/$userId',
  path: '/user/index/$userId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/sub-next/': {
      id: '/sub-next/'
      path: '/sub-next'
      fullPath: '/sub-next'
      preLoaderRoute: typeof SubNextIndexImport
      parentRoute: typeof rootRoute
    }
    '/sub-nuxt/': {
      id: '/sub-nuxt/'
      path: '/sub-nuxt'
      fullPath: '/sub-nuxt'
      preLoaderRoute: typeof SubNuxtIndexImport
      parentRoute: typeof rootRoute
    }
    '/sub-vue3/': {
      id: '/sub-vue3/'
      path: '/sub-vue3'
      fullPath: '/sub-vue3'
      preLoaderRoute: typeof SubVue3IndexImport
      parentRoute: typeof rootRoute
    }
    '/user/index/$userId': {
      id: '/user/index/$userId'
      path: '/user/index/$userId'
      fullPath: '/user/index/$userId'
      preLoaderRoute: typeof UserIndexUserIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/sub-next': typeof SubNextIndexRoute
  '/sub-nuxt': typeof SubNuxtIndexRoute
  '/sub-vue3': typeof SubVue3IndexRoute
  '/user/index/$userId': typeof UserIndexUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/sub-next': typeof SubNextIndexRoute
  '/sub-nuxt': typeof SubNuxtIndexRoute
  '/sub-vue3': typeof SubVue3IndexRoute
  '/user/index/$userId': typeof UserIndexUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/sub-next/': typeof SubNextIndexRoute
  '/sub-nuxt/': typeof SubNuxtIndexRoute
  '/sub-vue3/': typeof SubVue3IndexRoute
  '/user/index/$userId': typeof UserIndexUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/sub-next'
    | '/sub-nuxt'
    | '/sub-vue3'
    | '/user/index/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/sub-next'
    | '/sub-nuxt'
    | '/sub-vue3'
    | '/user/index/$userId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/sub-next/'
    | '/sub-nuxt/'
    | '/sub-vue3/'
    | '/user/index/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  SubNextIndexRoute: typeof SubNextIndexRoute
  SubNuxtIndexRoute: typeof SubNuxtIndexRoute
  SubVue3IndexRoute: typeof SubVue3IndexRoute
  UserIndexUserIdRoute: typeof UserIndexUserIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  SubNextIndexRoute: SubNextIndexRoute,
  SubNuxtIndexRoute: SubNuxtIndexRoute,
  SubVue3IndexRoute: SubVue3IndexRoute,
  UserIndexUserIdRoute: UserIndexUserIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/sub-next/",
        "/sub-nuxt/",
        "/sub-vue3/",
        "/user/index/$userId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/sub-next/": {
      "filePath": "sub-next/index.tsx"
    },
    "/sub-nuxt/": {
      "filePath": "sub-nuxt/index.tsx"
    },
    "/sub-vue3/": {
      "filePath": "sub-vue3/index.tsx"
    },
    "/user/index/$userId": {
      "filePath": "user/index.$userId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
